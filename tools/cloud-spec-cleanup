#! /usr/bin/env node

const { CloudFormationClient, DeleteStackCommand, DescribeStacksCommand } = require('@aws-sdk/client-cloudformation');
const { ResourceGroupsTaggingAPIClient, GetResourcesCommand } = require('@aws-sdk/client-resource-groups-tagging-api');
const client = new CloudFormationClient({});


// find all stacks tagged with "cloud-spec-cleanup"
(async () => {
  const taggingClient = new ResourceGroupsTaggingAPIClient({});
  const tagFilters = [
    {
      Key: 'CloudSpecProjectName',
      Values: [process.env.CLOUD_SPEC_PROJECT_NAME]
    },
  ]
  if (process.env.CLOUD_SPEC_GIT_REF_NAME) {
    tagFilters.push(      {
      Key: 'GitRefName',
      Values: [process.env.CLOUD_SPEC_GIT_REF_NAME]
    });
  }
  const stacks = await taggingClient.send(new GetResourcesCommand({
    TagFilters: tagFilters,
    ResourceTypeFilters: ['cloudformation:stack']
  }));

  if (stacks.ResourceTagMappingList.length === 0) {
    console.log('No stacks found');
    return;
  }

  await Promise.all(stacks.ResourceTagMappingList.map(async (stack) => {
    const stackName = stack.ResourceARN.split('/')[1];
    console.log(`Deleting stack ${stackName}`);
    await client.send(new DeleteStackCommand({ StackName: stackName }));
    while (true) {
      try {
        const { Stacks } = await client.send(new DescribeStacksCommand({ StackName: stackName }));
        console.log(`Stack ${stackName} status: ${Stacks[0].StackStatus}`);
        await new Promise(resolve => setTimeout(resolve, 2500));
      } catch (error) {
        if (error.name !== 'ValidationError') {
          throw error;
        }
        console.log(`Stack ${stackName} status: DELETE_COMPLETE`);
        break;
      }
    }
  }));
})();
